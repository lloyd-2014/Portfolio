Rem 'Flow Control
    [Pull] 	Req.IsPost 	Product.Select Product.Add Cart.Show Checkout.Show Payment.Pay _
                        CartItem.Delete CartItem.Select CartItem.Edit Cart.Item.Qty Orders.Show _
                        Product.Review Review.Edit

    If		Req.IsPost	:	And Product.Add		:							Cart.Form.Add Product.Add
    ElseIf 						Product.Select	: And Not Review.Edit	:	Product.Item.Display Product.Select

    ElseIf	Req.IsPost	:	And Review.Edit		: And Product.Select	:	Product.Review.Save Review.Edit, Product.Select
    ElseIf						Product.Review	:							Product.Review.Form Product.Review

    ElseIf	Req.IsPost	:	And Payment.Pay		: And Cart.Show			: 	Checkout.Items.Transaction Cart.Show
    ElseIf						Checkout.Show	:							Checkout.Items.Show	Checkout.Show

    ElseIf						CartItem.Edit	:							Cart.Items.Edit CartItem.Edit, Cart.Item.Qty, Cart.Show

    ElseIf						Cart.Show		:							Cart.Items.Show Cart.Show
    ElseIf						CartItem.Delete	:							Cart.Items.Delete CartItem.Delete

    ElseIf						Orders.Show		:							Orders.All
    Else 										: 							Product.Item.All
    End If
EndRem

Method Product.Item.All()
    Rem 'Get Cart Alias
        SetNew				"MemTab.Person.Alias", ($SessionUser)
        [Pull]				"Me.Output", "ShoppingCart.Cart.Alias"
        Children			"ShoppingCart.Cart"
        [New]				pCart |	ShoppingCart.Cart.Alias
    EndRem

    Rem 'Display Cart, Checkout, and Order History buttons
        HtmlBlock
            <div class="btn-group" style="padding: 25px;">
                <a href="?Cart.Show={[pCart]}" class="btn btn-primary" role="button"><span class="glyphicon glyphicon-shopping-cart"></span> Cart</a>
                <a href="?Checkout.Show={[pCart]}#total" class="btn btn-warning" role="button"><span class="glyphicon glyphicon-barcode"></span> Proceed to Checkout</a>
                <a href="?Orders.Show=y" class="btn btn-info" role="button"><span class="glyphicon glyphicon-list"></span> Your Orders</a>
            </div>
        End HtmlBlock
    EndRem

    Rem 'Display products on the page. Will implement categories in the future. Displays products in rows.
        LoadTable 	"Product.Item"
        Build       "Product.Item.", "Name", ("<a href='?Product.Select="), "Alias", "'>", "Name", "</a>", "Name"

        Rem 'row.display-flex class used to make columns the same height (bootstrap 3 thing; bootstrap 4 does this by default)
            HtmlBlock
                <style>
                    .row.display-flex {
                      display: flex;
                      flex-wrap: wrap;
                    }
                    .row.display-flex > [class*='col-'] {
                      display: flex;
                      flex-direction: column;
                    }
                </style>

                <div class="container-fluid">
                    <div class="row display-flex">
            End HtmlBlock

                HtmlBlocks
                    <div class="col-sm-3" style="margin-bottom:40px;">
                        <div class="col-sm-12" style="height:100px;text-align:center;"><img src="{{Product.Item.Image}}" style="width:auto;height:100%;"></div>
                        <div class="col-sm-12" style="height:100px;"><p>{{Product.Item.Name}}</p></div>
                        <div class="col-sm-12" style="height:20px;">
                            <span class="label label-info">{{Product.Item.Price}}</span>
                            <span class="label label-default">Stock {{Product.Item.Stock}}</span>
                            <span class="label label-warning">Rating {{Product.Item.Stars}}</span>
                        </div>
                    </div>
                End HtmlBlocks

            HtmlBlock
                  </div>
                </div>
            End HtmlBlock
        EndRem
    EndRem
End Method


Method Product.Item.Display(pAlias)
    Rem 'Display the product's image, discription, review(s), and option to add to cart
        LoadRecord 		"Product.Item", pAlias
        Children		"Product.Review"
        [Pull] "Me.Output", "Product.Item.Stars Product.Item.ReviewSum Product.Item.Fives Product.Item.Fours Product.Item.Threes Product.Item.Twos Product.Item.Ones"
    EndRem

    Rem	'Display product image, desc, and form in 3 columns.
        HtmlBlock
            <div class="container-fluid">
                <div class="row">
                    <div class="col-sm-3">
                        <? ProductImage ?>
                    </div>
                    <div class="col-sm-5">
                        <? ProductDesc ?>
                    </div>
                    <div class="col-sm-4">
                        <? ProductForm ?>
                    </div>
              </div>
            </div>
            <hr>
            <div>
                <h3>Customer Reviews</h3>
                <? Rating ?>
                <? Reviews ?>
            </div>

        End HtmlBlock
    EndRem

    Rem '<? ProductImage ?>
        Product.Item.Display.Image "ProductImage", pAlias
    EndRem

    Rem '<? ProductDesc ?>
        Product.Item.Display.Desc "ProductDesc", pAlias
    EndRem

    Rem '<? ProductForm ?>
        Product.Form "ProductForm", pAlias
    EndRem

    Rem	'<? Rating ?> Displays overall rating for product.

        Rem 'Compute progress bar %
            [New]			fives 	| ((Product.Item.Fives / Product.Item.ReviewSum) * 100)
            [New]			fours 	| ((Product.Item.Fours / Product.Item.ReviewSum) * 100)
            [New]			threes 	| ((Product.Item.Threes / Product.Item.ReviewSum) * 100)
            [New]			twos 	| ((Product.Item.Twos / Product.Item.ReviewSum) * 100)
            [New]			ones 	| ((Product.Item.Ones / Product.Item.ReviewSum) * 100)
        EndRem

        Rem 'Display rating information e.g how many 5 star ratings there are
            HtmlBlock "Rating"
                <a href="?Product.Review={[pAlias]}"><span></span> Write a Review</a>
                <div class="row">
                    <div class="col-sm-3">
                        <h2 style="font-size: 72px;">{[Product.Item.Stars]}</h2>
                        <p>Based on {[Product.Item.ReviewSum]} review(s)</p>
                    </div>
                    <div class="col-sm-5">
                        <h1>Ratings in detail</h1>

                        <p style="text-align: center;">5 Star</p>
                        <div class="progress">
                            <div class="progress-bar-warning" role="progressbar" aria-valuenow="5"
                            aria-valuemin="0" aria-valuemax="100" style="width:{[fives]}%">
                                <span class="sr-only"></span> <p style="text-align: center;">{[Product.Item.Fives]}</p>
                            </div>
                        </div>

                        <p style="text-align: center;">4 Star</p>
                        <div class="progress">
                            <div class="progress-bar-warning" role="progressbar" aria-valuenow="4"
                            aria-valuemin="0" aria-valuemax="100" style="width:{[fours]}%">
                                <span class="sr-only"></span> <p style="text-align: center;">{[Product.Item.Fours]} ratings</p>
                            </div>
                        </div>

                        <p style="text-align: center;">3 Star</p>
                        <div class="progress">
                            <div class="progress-bar-warning" role="progressbar" aria-valuenow="3"
                            aria-valuemin="0" aria-valuemax="100" style="width:{[threes]}%">
                                <span class="sr-only"></span> <p style="text-align: center;">{[Product.Item.Threes]} ratings</p>
                            </div>
                        </div>

                        <p style="text-align: center;">2 Star</p>
                        <div class="progress">
                            <div class="progress-bar-warning" role="progressbar" aria-valuenow="2"
                            aria-valuemin="0" aria-valuemax="100" style="width:{[twos]}%">
                                <span class="sr-only"></span> <p style="text-align: center;">{[Product.Item.Twos]} ratings</p>
                            </div>
                        </div>

                        <p style="text-align: center;">1 Star</p>
                        <div class="progress">
                            <div class="progress-bar-warning" role="progressbar" aria-valuenow="1"
                            aria-valuemin="0" aria-valuemax="100" style="width:{[ones]}%">
                                <span class="sr-only">{[Product.Item.Fives]}</span> <p style="text-align: center;">{[Product.Item.Ones]} ratings</p>
                            </div>
                        </div>
                    </div>
                </div>
            End HtmlBlock
        EndRem
    EndRem

    Rem '<? Reviews ?>
        HtmlBlocks "Reviews"
            <hr>
            <div class="container-fluid">
                <div class="row">
                    <div class="col-sm-3">
                        <h1>{{Product.Review.Name}}</h1>
                        <p>{{Product.Review.Date}}</p>
                        <p><span class="label label-warning">{{Product.Review.Stars}}</span></p>
                    </div>
                    <div class="col-sm-5">
                        <h1>{{Product.Review.Title}}</h1>
                        <p>{{Product.Review.Desc}}</p>
                    </div>
                </div>
            </div>
            <hr>
        End HtmlBlocks
    EndRem
End Method


Method Product.Item.Display.Image(pTmplName, pAlias)
    Rem 'Takes the Product's alias and insertion point as a parameter and uses it's image field attribute to display the image
        LoadRecord	"Product.Item", pAlias

        WorkWith 	"Product.Item"
            HtmlBlocks (pTmplName)
                <img src="{{Image}}" style="width: 100%">
            End HtmlBlocks
        End WorkWith
    EndRem
End Method


Method Product.Item.Display.Desc(pTmplName, pAlias)
    Rem 'Displays the product's description
        LoadRecord 	"Product.Item", pAlias

        WorkWith 	"Product.Item"
            HtmlBlocks (pTmplName)
                <h4>{{Name}}</h4>
                <p>By {{Company}}</p>
                <p><span class="label label-info">{{Price}}</span></p>
                <p><span class="label label-warning">Rating: {{Stars}}</span></p>
                <hr>
                <h4>Description</h4>
                <p>{{Desc}}</p>
            End HtmlBlocks
        End WorkWith
    EndRem
End Method


Method Product.Form(pTmplName, pAlias)
    Rem 'Check if there is stock left for the item
        LoadRecord			"Product.Item", pAlias
        [New] 				ProdStock 	| Product.Item.Stock
        [Pull]				"Me.Output", "Product.Item.Stock"
        [New] 				pAvailable	= checkStock Product.Item.Stock, ""
        [New] StockIsAvailable [IF] ProdStock <<>> 0 THEN "y"
    EndRem

    Rem 'Build a form in a bootstrap panel
        HtmlBlock pTmplName
            <div class="panel panel-default">
                <div class="panel-body">
                    <? Stock ?>
                </div>
            </div>
            <a href="?" class="btn btn-primary" class="glyphicon glyphicon-shopping-cart" role="button">Continue Shopping</a>
        End HtmlBlock
    EndRem

    Rem '<? Stock ?>
        Rem 'Hide Form Label i.e. i'm hiding the quantity label and making the markdown thinner
            HtmlBlock
                <style>
                    label {
                        display: none;
                    }
                    .form-control {
                        display: block;
                        width: 50%;
                        height: 34px;
                        padding: 6px 12px;
                        font-size: 14px;
                        line-height: 1.42857143;
                        color: #555;
                        background-color: #fff;
                        background-image: none;
                        border: 1px solid #ccc;
                        border-radius: 4px;
                        -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,0.075);
                        box-shadow: inset 0 1px 1px rgba(0,0,0,0.075);
                        -webkit-transition: border-color ease-in-out .15s, -webkit-box-shadow ease-in-out .15s;
                        -o-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;
                        transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;
                    }
                </style>
            End HtmlBlock
        EndRem

        If 	Product.Item.Stock <<>> 0
            Reset
            WorkWith			"ShoppingCart.CartItem"
                Pull			"Qty"
                GetFieldDefs
                HtmlForm 		"Stock", "<? i shopping-cart ?> Add to Cart", ("?Product.Add="&pAlias)
            End WorkWith
        Else
            HtmlBlock "Stock", "Append"
                <p><span class="label label-danger">0 in Stock</span></p>
            End HtmlBlock
        End If
    EndRem
End Method


Method Product.Review.Form(pProd)
    Rem	'Search for the user's review on the product
        Rem	'Load all of the user's reviews into a NewQuery
            SetNew				"MemTab.Person.Alias", ($SessionUser)
            Children			"Product.Review"
            NewQuery			"personReview", "Me.Output"
        EndRem

        Rem 'Create NewQuery containing all of the reviews on the product
            Reset
            SetNew				"Product.Item.Alias", `pProd
            Children			"Product.Review"
            NewQuery			"product", "Me.Output"
        EndRem

        Rem	'Join the queries matching the user's review based on all the reviews on the product
            JoinQuery			"personReview", "product", "Product.Review.Alias", "Product.Review.Alias"
            WorkQuery			"personReview"
            KeepIf				"Product.Review.", "Alias.Source"
        EndRem

        Rem 'Extract the user's review alias
            KeepFields			"Product.Review.", "Alias Stars Desc Title Name"
            [Pull]				"personReview", "Product.Review.Alias Product.Review.Stars Product.Review.Desc Product.Review.Title Product.Review.Name"
            [New]				reviewAlias | Product.Review.Alias
        EndRem
    EndRem

    Rem	'Create Review Form
        WorkWith			"Product.Review"
            Pull			"Stars Desc Title Name"
            Set				"Title", `Product.Review.Title
            Set				"Stars", `Product.Review.Stars
            Set				"Desc", `Product.Review.Desc
            Set				"Name", `Product.Review.Name
        End WorkWith
    EndRem

    KeepFields			"Product.Review.Title Product.Review.Stars Product.Review.Desc Product.Review.Name"
    GetFieldDefs

    Rem	'If the user hasn't reviewed the product, use a * as an alias. Otherwise use the review's alias
        If Not reviewAlias
            HtmlForm 			"MainBody", "<? i shopping-cart ?> Submit Review", ("?Review.Edit=*&Product.Select="&pProd)
        Else
            HtmlForm 			"MainBody", "<? i shopping-cart ?> Submit Review", ("?Review.Edit="&reviewAlias&"&Product.Select="&pProd)
        End If
    EndRem
End Method


Method Product.Review.Save(pReview, pProd)
    [Pull] "Product.Review.Stars Product.Review.Desc Product.Review.Title Product.Review.Name"
     Rem 'Create a new review or edit an existing one.
        If pReview = *
            [New]				name = ($SessionName)
            WorkWith 			"Product.Review"
                Pull			"Alias Stars Desc Title Name"
                Set				"Alias", *
                Set				"Stars", `Product.Review.Stars
                Set				"Desc", `Product.Review.Desc
                Set				"Title", `Product.Review.Title
                Set				"Name", `name
            End WorkWith

            Rem 'Attach review to Product.Item
                SetNew					"Product.Item.Alias", `pProd
                NewWithAttach			"Product.Review", "Parent", "Product.Item"
                [New]					lastReview = LastAlias$ "Product.Review"
            EndRem

            Rem	'Attach review to user i.e MemTab.Person
                SetNew					"MemTab.Person.Alias", ($SessionUser)
                Set						"Product.Review.Alias", `lastReview
                Attach					"MemTab.Person", "Product.Review"
            EndRem
        End If
    EndRem

    Rem 'Update the existing review
        If pReview <> *
            WorkWith 			"Product.Review"
                Pull			"Alias Stars Desc Title Name"
                Set				"Alias", `pReview
                Set				"Title", `Product.Review.Title
                Set				"Stars", `Product.Review.Stars
                Set				"Desc", `Product.Review.Desc
                Set				"Name", `Product.Review.Name
                Backfill
                    Update
                End Backfill
            End WorkWith
        End If
    EndRem

    Product.Item.Display pProd
End Method


Function checkStock(pStock, pQty)
    Rem 'Check if there is enough stock available based on the requested quantity
        If			pQty >> pStock	:	And pStock <<>> 0 : Return ""
        Else						:						Return "y"
        End If
    EndRem
End Function


Method Product.Stock.forStock()
    Rem 'For each cartItem quantity, substract it from the product stock.
        [New]					alias | Product.Item.Alias
        [New]					stock | Product.Item.Stock
        [New]					qty | ShoppingCart.CartItem.Qty
        [New]					newStock = (stock - qty)
        WorkWith				"Product.Item"
            Pull				"Stock"
            Set					"Alias", `alias
            Set					"Stock", `newStock
            Backfill
                Update
            End Backfill
        End WorkWith
    EndRem
End Method


Method Cart.Form.Add(pAlias)
    Rem 'Get Shopping Cart from user, and pull the cart's alias into top query
        [Pull]					ShoppingCart.CartItem.Qty
        LoadRecord				"Product.Item", pAlias
        SetNew					"MemTab.Person.Alias", ($SessionUser)
        Children				"ShoppingCart.Cart"
        [Pull] 					"Me.Output", "ShoppingCart.Cart.Alias"
        [New]					pCart =	ShoppingCart.Cart.Alias
    EndRem

    Rem 'Check if selected CartItem quantity is greater than the available stock
        [Pull]					"Me.Output", "Product.Item.Stock"
        [New]					pStock = Product.Item.Stock
        [New]					available = checkStock pStock, ShoppingCart.CartItem.Qty
    EndRem

    Rem 'No Stock
        If Not available
            HtmlBlock
                <h2>
                    <span class="label label-warning">
                    <? ok ?>
                    <span class="glyphicon glyphicon-thumbs-down"></span>
                        Sorry, that quantity is greater than the available stock.
                    </span>
                </h2>
            End HtmlBlock

            Exit
        End If
    EndRem

    Rem 'Has Stock
        If available
            Rem	'Attach the CartItem to the Product.Item (Product.Item is the parent to CartItem)
                WorkWith				"ShoppingCart.CartItem"
                    SetNew				"Alias", *
                    SetNew				"Qty", `ShoppingCart.CartItem.Qty
                    NewWithAttach		"Parent", "Product.Item"
                    Update
                End WorkWith
                [New] pCartItem	|		LastAlias$ "ShoppingCart.CartItem"
            EndRem

            Rem	'Attach the CartItem to the Cart
                [New] lastCartItem 		| "ShoppingCart.CartItem.Alias"
                '[New] lastCartItem = 	LastAlias$ "ShoppingCart.CartItem"
                Attach					"ShoppingCart.Cart", "ShoppingCart.CartItem"
                Update					"ShoppingCart.Cart"
            EndRem

            Rem	'Build interface verifying to user that the item has been added to cart
                WorkWith "ShoppingCart.CartItem"
                    HtmlBlocks
                        <h2 style="text-align: center;"><span class="label label-success"><? ok ?>
                            <span class="glyphicon glyphicon-ok"></span>Added to Cart</span>
                            <span class="label label-info">Cart subtotal ({{Qty}}) items: {{Amount}}</span>
                        </h2>
                    End HtmlBlocks
                End WorkWith
            EndRem

            Rem	'Display the cart's items
                Cart.Items.Show	pCart
            EndRem
        End If
    EndRem
End Method


Method Cart.Items.Show(pAlias)
    Rem	'Load the CartItems
        LoadRecord				"ShoppingCart.Cart", pAlias
        Children				"ShoppingCart.CartItem"
        Parents					"ShoppingCart.CartItem", "Product.Item"
        Build       			"Product.Item.", "Name", ("<a href='?Product.Select="), "Alias", "'>", "Name", "</a>", "Name"
    EndRem

    Rem 'Build a drop down menu for Quantity field. Menu contains numbers 1 to 5 representing cartItem quantity
        NewFields			"Quantity"

        Prefix    Build "", "Quantity", "Quantity",
            "<div class='dropdown'>", ""
            "<button type='button' class='btn btn-default' id='dropdownMenu1' class='dropdown-toggle'  data-toggle='dropdown'>", "ShoppingCart.CartItem.Qty", "<span class='caret'></span>", "</button>", ""
            "<ul class='dropdown-menu' style='z-index: 10000;'>", ""
                ("<li><a href='?Cart.Show=" & pAlias & "&Cart.Item.Qty=1&CartItem.Edit="), "ShoppingCart.CartItem.Alias", ("#" & pAlias & "'>1</a></li>"), ""
                ("<li><a href='?Cart.Show=" & pAlias & "&Cart.Item.Qty=2&CartItem.Edit="), "ShoppingCart.CartItem.Alias", ("#" & pAlias & "'>2</a></li>"), ""
                ("<li><a href='?Cart.Show=" & pAlias & "&Cart.Item.Qty=3&CartItem.Edit="), "ShoppingCart.CartItem.Alias", ("#" & pAlias & "'>3</a></li>"), ""
                ("<li><a href='?Cart.Show=" & pAlias & "&Cart.Item.Qty=4&CartItem.Edit="), "ShoppingCart.CartItem.Alias", ("#" & pAlias & "'>4</a></li>"), ""
                ("<li><a href='?Cart.Show=" & pAlias & "&Cart.Item.Qty=5&CartItem.Edit="), "ShoppingCart.CartItem.Alias", ("#" & pAlias & "'>5</a></li>"), ""
            "</ul>", ""
            "</div>", ""
        End Prefix

        Rem 'Build a Delete Button for each cartItem
            WorkWith				"ShoppingCart.CartItem"
                NewFields   		"Delete"
                Build   			"Delete", ((NbSp$ 4) & "<a href='?CartItem.Delete="), "Alias", "'><? i remove ?></a>", "Alias"
            End WorkWith
        EndRem

        KeepFields				"Product.Item.Name ShoppingCart.CartItem.Amount Quantity ShoppingCart.CartItem.Delete"
        NameField				"ShoppingCart.CartItem.Delete", "Delete"
    EndRem

    Rem 'Display CartItems
        HtmlBlock
            <div class="container">
                <h2>Your Cart</h2>
                  <div class="panel-group">
                    <div class="panel panel-info">
                      <div class="panel-heading">Items</div>
                      <div class="panel-body">
                        <div class="btn-group" style="padding-bottom: 25px; padding-top: 10px;">
                            <a href="?" class="btn btn-primary" role="button"><span class="glyphicon glyphicon-shopping-cart"></span> Continue Shopping</a>
                            <a href="?Checkout.Show={[pAlias]}#total" class="btn btn-warning" role="button"><span class="glyphicon glyphicon-barcode"></span> Proceed to Checkout</a>
                        </div>
                        <? cartItems ?>
                      </div>
                    </div>
                 </div>
            </div>
        End HtmlBlock
    EndRem

    Rem '<? cartItems ?>
        HtmlDTable "cartItems"
    EndRem
End Method


Method Cart.Items.Edit(pCartItem, pQty, pCart)
    Rem	'Check if there is enough stock to accommodate the edited CartItem quantity
        LoadRecord 				"ShoppingCart.CartItem", pCartItem
        Parents					"ShoppingCart.CartItem", "Product.Item"
        [Pull]					"Me.Output", "ShoppingCart.CartItem.Qty Product.Item.Stock"
        [New]					pStock 		= Product.Item.Stock
        [New]					pAvailable 	= checkStock pStock, pQty
    EndRem

    Rem	'Only edit CartItem quantity if there is enough stock available
        If	pAvailable
            [New] pNewStock = (pStock + (ShoppingCart.CartItem.Qty - pQty))

            Rem 'Update CartItem Quantity
                Set					"ShoppingCart.CartItem.Qty", `pQty
                Backfill
                    Update			"ShoppingCart.CartItem"
                    FailIfRecError
                End Backfill
            EndRem

            Rem 'Update stock
                Set					"Product.Item.Stock", `pNewStock
                Backfill
                    Update			"Product.Item"
                    FailIfRecError
                End Backfill
            EndRem
        Else
            HtmlAlert "Sorry, there is not enough stock available."
        End If
    EndRem

    Rem 'Display CartItems
        Cart.Items.Show pCart
    EndRem
End Method


Method Cart.Items.Delete(pCartItem)
    Rem 'Delete a single CartItem
        If pCartItem
            Rem 'Before deleting the CartItem, compute the stock to be replenished
                LoadRecord			"ShoppingCart.CartItem", pCartItem
                Parents				"ShoppingCart.CartItem", "Product.Item"
                Parents				"ShoppingCart.CartItem", "ShoppingCart.Cart"
                [Pull]				"Me.Output", "ShoppingCart.CartItem.Qty Product.Item.Stock Product.Item.Alias ShoppingCart.Cart.Alias"
                [New]				pStock 		= Product.Item.Stock
                [New]				pNewStock 	= (pStock + ShoppingCart.CartItem.Qty)
                [New]				pProduct 	= Product.Item.Alias

                Rem 'Delete the cartitems and lineitem
                    DetachWithDelete	"ShoppingCart.CartItem", "Parent", "ShoppingCart.Cart"
                    FailIfRecError
                    Cart.Items.Show 	ShoppingCart.Cart.Alias
                EndRem

            EndRem
        End If
    EndRem
End Method


Method Checkout.Items.Show(pCart)
    Rem 'Create boolean variable to check if cart is empty
        LoadRecord				"ShoppingCart.Cart", pCart
        Children				"ShoppingCart.CartItem"
        [Pull]					"Me.Output", "ShoppingCart.CartItem.Product"
        [New]					hasItems | ShoppingCart.CartItem.Product
    EndRem

    Rem 'Do not display cart or payment form if the cart is empty.
        If Not hasItems
            HtmlBlock
                <h2><span class="label label-warning">
                    <? ok ?>
                    <span class="glyphicon glyphicon-thumbs-down"></span>
                        Your cart is empty!
                    </span>
                </h2>
            End HtmlBlock
            Exit
        End If
    EndRem

    Rem 'Display Cart
        If hasItems
            HtmlBlock
                <span id="total"></span>
                <div class="container">
                    <h2>Final Total</h2>
                      <div class="panel-group">
                        <div class="panel panel-success">
                          <div class="panel-heading">Transaction</div>
                          <div class="panel-body">
                            <? TransTable ?>
                          </div>
                        </div>
                     </div>
                </div>
            End HtmlBlock

            Rem	'Display a form for the user to make a payment
                Checkout.Items.Form.Payment pCart
            EndRem
        End If
    EndRem

    Rem '<? TransTable ?>
        Cart.Items.Show 		pCart
        Reset
        LoadRecord				"ShoppingCart.Cart", pCart
        KeepFields				"ShoppingCart.Cart.", "SubTotal Tax1 Tax2 Total"
        HtmlTable 				"TransTable"
    EndRem

End Method


Method Checkout.Items.Form.Payment(pCart)
    Rem 'Display the payment form in a bootstrap panel
        HtmlBlock
            <div class="container">
                <h2>Make Payment</h2>
                  <div class="panel-group">
                    <div class="panel panel-primary">
                      <div class="panel-heading">Payment</div>
                      <div class="panel-body">
                        <? PaymentForm ?>
                      </div>
                    </div>
                </div>
            </div>
        End HtmlBlock
    EndRem

    Rem '<? PaymentForm ?>
        WorkWith			"Finance.Payment"
            Pull			"Account Amount Note"
            GetFieldDefs
            HtmlForm 		"PaymentForm", "<? i check ?> Pay", ("?Payment.Pay=y"&"&Cart.Show="&pCart)
        End WorkWith
    EndRem
End Method


Method Checkout.Items.Transaction(pCart)
    Rem 'Create a transaction
        WorkWith			"Finance.Transaction"
            Pull 			"Alias Date"
            Set				"Alias", *
            Set				"Date", ($Today)
        End WorkWith
        SetNew				"MemTab.Person.Alias", ($SessionUser)
        NewWithAttach 		"Finance.Transaction", "Parent", "MemTab.Person"
        [New] 				pTran | LastAlias$ "Finance.Transaction"
    EndRem

    Rem 'Create a LineItem for each CartItem
        Reset					'Clean up the work query
        LoadRecord				"ShoppingCart.Cart", pCart
        Children				"ShoppingCart.CartItem"
        Parents					"ShoppingCart.CartItem", "Product.Item"
        [Pull]					"Me.Output", "ShoppingCart.CartItem.Alias"
        ForEach					"Me.Output", "Checkout.Items.LineItem", pTran
    EndRem

    Rem 'Check product stock before processing payment
        KeepFields				"ShoppingCart.CartItem.Qty Product.Item.Alias"

        NewQuery				"Item"
        WorkQuery				"Item"

        LoadRecord				"ShoppingCart.Cart", pCart
        Children				"ShoppingCart.CartItem"
        Parents					"ShoppingCart.CartItem", "Product.Item"

        JoinQuery				"Checkout.Items.Transaction.Output", "Item", "Product.Item.Alias", "Product.Item.Alias"
        WorkQuery				"Checkout.Items.Transaction.Output"

        Rem 'Check if any CartItem quantity is greater than available product stock
            KeepFields				"ShoppingCart.CartItem.Qty Product.Item.Alias Product.Item.Stock Product.Item.Name Product.Item.Image Product.Item.Desc Product.Item.Price"
            NewFields				"IsInStock"
            SetIf					"IsInStock", "`y", "ShoppingCart.CartItem.Qty", ">>", "Product.Item.Stock"
            KeepIf					"IsInStock"
        EndRem

        [New] FoundAny			| Product.Item.Alias

        Rem 'If stock is not available, display which items are out of stock.
            If FoundAny
                HtmlBlock
                    <h2 style="text-align: center;">
                        <span class="label label-warning">
                        <? ok ?>
                        <span class="glyphicon glyphicon-thumbs-down"></span>
                            Sorry, there is not enough stock for your order.
                        </span>
                    </h2>
                    <? NoStock ?>
                End HtmlBlock

                Rem 'Delete the transaction and its lineitems i.e. abort the transaction
                    SetNew					"Finance.Transaction.Alias", `pTran
                    Children				"Finance.LineItem"
                    DetachWithDelete		"Finance.LineItem", "Parent", "Finance.Transaction"
                    Delete					"Finance.Transaction"
                EndRem
            End If
        EndRem

        Rem 'Stock is available
            If Not FoundAny
                Rem 'Attach payment
                    Checkout.Items.Pay pCart, pTran
                EndRem
            End If
        EndRem
    EndRem

    Rem '<? NoStock ?>
        HtmlBlocks "NoStock"
            <div class="panel-body">
                <div class="row" style="padding-bottom: 10px;">
                    <div class="col-sm-3">
                        <img src="{{Product.Item.Image}}" style="width: 100%">
                    </div>
                    <div class	="col-sm-4">
                        <ul style="list-style-type: none;">
                            <li><a href="?Product.Select={{Product.Item.Alias}}">{{Product.Item.Desc}}</a></li>
                            <li><p><span class="label label-info">{{Product.Item.Price}}</span></p></li>
                            <li><p><span class="label label-danger">Stock: {{Product.Item.Stock}}</span></p></li>
                        </ul>
                    </div>

                </div>
            </div>
        End HtmlBlocks
    EndRem

End Method


Function Checkout.Items.Stock()
    HtmlTable
End Function


Method Checkout.Items.Pay(pCart, pTran)
    [Pull] 	Finance.Payment.Account Finance.Payment.Amount Finance.Payment.Note

    Rem 'Set field values for the payment from the top query
        WorkWith				"Finance.Payment"
            Pull				"Alias Account Amount Note"
            Set					"Alias", *
            Set					"Account",	`Finance.Payment.Account
            Set					"Amount",	`Finance.Payment.Amount
            Set					"Note",		`Finance.Payment.Note
        End WorkWith
    EndRem

    Rem 'Attach Payment to transaction
        SetNew				"Finance.Transaction.Alias", `pTran
        SetNew				"ShoppingCart.Cart.Alias", `pCart
        NewWithAttach		"Finance.Payment", "Parent", "Finance.Transaction"
    EndRem

    Rem	'Update Product.Item.Qty by substracting the number of cartItems from the stock
        Children				"ShoppingCart.CartItem"
        Parents					"ShoppingCart.CartItem", "Product.Item"
        ForEach					"Me.Output", "Product.Stock.forStock"
    EndRem

    Rem 'Empty the ShoppingCart
        Reset
        SetNew				"ShoppingCart.Cart.Alias", `pCart
        Children			"ShoppingCart.CartItem"
        DetachWithDelete 	"ShoppingCart.CartItem", "Parent", "ShoppingCart.Cart"
        FailIfRecError
        'ForEach				"Me.Output", "Cart.Items.Delete", ""
    EndRem

    Rem 'display receipt
        Checkout.Items.Receipt pTran
    EndRem
End Method


Method Checkout.Items.LineItem(pTran)
    Rem	'Top Query values used to create a LineItem
        [New]					pQty 	| ShoppingCart.CartItem.Qty
        [New]					pDesc	| Product.Item.Name
        [New]					pAcc 	| Product.Item.Account
        [New]					pPrice	| Product.Item.Price
        [New]					stock	| Product.Item.Stock
    EndRem

    Rem 'Create and attach LineItems to Transaction
        WorkWith				"Finance.LineItem"
            Pull 				"Alias Account Qty Price Desc"
            Set					"Alias", *
            Set					"Account", `pAcc
            Set					"Qty", `pQty
            Set					"Price", `pPrice
            Set					"Desc", `pDesc
        End WorkWith
        SetNew					"Finance.Transaction.Alias", `pTran
        NewWithAttach			"Finance.LineItem", "Parent", "Finance.Transaction"
        [New] pLine2 		     | Finance.LineItem.Alias
    EndRem

    Rem 'Attach lineitem to product.item
        [New] 				pLine	|	LastAlias$	"Finance.LineItem"
        Set					"Finance.LineItem.Alias", `pLine
        Attach				"Product.Item.Alias", "Finance.LineItem"
        FailIfRecError
    EndRem
End Method


Method Checkout.Items.Receipt(pTran)
    Rem 'Display LineItems
        HtmlBlock
        <div class="container">
            <h2>Your Order</h2>
              <div class="panel-group">
                <div class="panel panel-primary">
                  <div class="panel-heading">Items</div>
                      <div class="panel-body">
                        <? LineItems ?>
                      </div>
                  </div>
                 </div>
            </div>
        End HtmlBlock
    EndRem

    Rem 'Display Transaction
        HtmlBlock
        <div class="container">
            <h2>Receipt</h2>
              <div class="panel-group">
                <div class="panel panel-success">
                  <div class="panel-heading">Payment Information</div>
                  <div class="panel-body">
                    <? Transaction ?>
                  </div>
                </div>
             </div>
        </div>
        End HtmlBlock
    EndRem

    Rem	'<? LineItems ?>
        LoadRecord			"Finance.Transaction", pTran
        Children			"Finance.LineItem"
        KeepFields			"Finance.LineItem.", "Desc Qty Amount Tax1 Tax2 Total"
        HtmlTable			"LineItems"
    EndRem

    Rem '<? Transaction ?>
        LoadRecord			"Finance.Transaction", pTran
        KeepFields			"Finance.Transaction.", "Date SubTotal Tax1 Tax2 Total Paid Balance"
        HtmlTable			"Transaction"
    EndRem
End Method


Method Orders.All()
    Rem	'ForEach transaction, display it's lineitems in a separate panel
        SetNew			"MemTab.Person.Alias", ($SessionUser)
        Children		"Finance.Transaction"
        KeepFields		"Finance.Transaction.", "Alias Date Total"

        HtmlAButton 	"MainBody", "Append", "<? i shopping-cart ?> Continue Shopping", ("?"), "&primary"
        ForEach			"Me.Output", "Orders.All.forOrder"
    EndRem
End Method


Method Orders.All.forOrder()
    Rem	'Put transaction date and total into Top Query so they are displayed in the panel once.
        [Pull]			"Me.Output", Finance.Transaction.Date Finance.Transaction.Total
    EndRem

    Rem	'Get the Transaction.LineItems
        Children		"Finance.LineItem"
        Parents			"Finance.LineItem","Product.Item"
    EndRem

    Rem 'Display orders
        HtmlBlock
            <div class="container">
                <h2>Your Order</h2>
                    <div class="panel-group">
                        <div class="panel panel-info">
                            <div class="panel-heading">
                                <div class="row">
                                    <div class="col-sm-4">ORDER PLACED: {[Finance.Transaction.Date]}</div>
                                    <div class="col-sm-4">TOTAL: {[Finance.Transaction.Total]}</div>
                                </div>
                            </div>
        End HtmlBlock

        HtmlBlocks
                        <div class="panel-body">
                            <div class="row" style="padding-bottom: 10px;">
                                <div class="col-sm-3">
                                    <img src="{{Product.Item.Image}}" style="width: 100%">
                                </div>
                                <div class	="col-sm-4">
                                    <ul style="list-style-type: none;">
                                        <li><a href="?Product.Select={{Product.Item.Alias}}">{{Finance.LineItem.Desc}}</a></li>
                                        <li><p><span class="label label-info">{{Finance.LineItem.Price}}</span></p></li>
                                        <li><p><span class="label label-default">Quantity: {{Finance.LineItem.Qty}}</span></p></li>
                                    </ul>
                                </div>

                            </div>
                        </div>
        End HtmlBlocks

        HtmlBlock
                    </div>
                </div>
            </div>
        End HtmlBlock
    EndRem
End Method