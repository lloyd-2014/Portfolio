<!doctype html>
<html lang="en">
    <head>
        <!-- Required meta tags -->
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
        
        <!-- Bootstrap CSS -->
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
        <link rel="stylesheet" href="home.css" type="text/css">
        
        <!-- My CSS -->
        <link rel="stylesheet" type="text/css" href="assignment_2.css">

        <!-- fonts -->
        <link href="https://fonts.googleapis.com/css?family=Montserrat|Quicksand|Roboto:300&display=swap" rel="stylesheet">
        <link href="https://fonts.googleapis.com/css?family=Roboto&display=swap" rel="stylesheet">
        <link href="https://fonts.googleapis.com/css?family=Montserrat&display=swap" rel="stylesheet">
        <!-- <link href="https://fonts.googleapis.com/css?family=Oxygen+Mono|Source+Code+Pro&display=swap" rel="stylesheet"> -->

        <!-- Font Awesome -->
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
        
        <title>Lloyd Junos</title>
    </head>

    <body>
        <!-- Banner -->
        <div class="jumbotron jumbotron-fluid" style="background-color:#D56C2C;">
            <div class="container">
                <h1 style="color: #F6F6F8;">Lloyd Junos</h1>
            </div>
        </div>

        <!-- About -->
        <div class="container" style="overflow: auto; padding-bottom: 25px;">
            <h1>About</h1>
            <p>
                <img src="project_images/spongy.png" style="width: 15%; height: 15%; border-radius: 50%; float:left; padding-right: 15px;">
                I currently work as a software developer at <a href="https://www.mpmeng.com/" target="_blank">MPM Engineering.</a>
            </p>
                In 2019, I completed a degree in Computer Science at the <a href="https://www.ufv.ca/computing/" target="_blank">University of the Fraser Valley</a> (UFV).
            <p>

            </p>
            <ul class="list-group" style="width: 250px;">
                <li class="list-group-item d-flex justify-content-between align-items-center" style="border: none; background-color: #F6F6F8;"><i class="fa fa-envelope" aria-hidden="true"></i><a href="mailto:lk.junos@gmail.com" target="_top">lk.junos@gmail.com</a></li>
                <li class="list-group-item d-flex justify-content-between align-items-center" style="border: none; background-color: #F6F6F8;"><i class="fa fa-github" aria-hidden="true"></i><a href="https://github.com/lloyd-2014" target="_blank">Github</a></li>
            </ul>
        </div>

        <!-- Projects -->
        <div class="container">
            <!-- <section class="project"> -->
                <h1>Projects</h1>
                <p>
                    Below is a collection of nearly all my projects and assignments I have completed at UFV.
                </p>
            <!-- </section> -->
            <!-- Space game -->
            <article class="project">
                <div class="row">
                    <div class="col">
                        <a href="#" class="pop" data-toggle="modal" data-target="#spaceModal">
                            <img src="project_images/space-game.gif" class="projImg">
                        </a>
                    </div>
                    <div class="col">
                        <h4>Space Invaders Remix</h4>
                        <p>2018 | <a href="https://github.com/lloyd-2014/Space-Invaders-Remix" target="_blank">Source</a> | <i>Processing, Java</i></p>
                        <p>
                            A game I created for my user interface design course. 
                            The objective of the game is to collect as many moon specimens as possible (i.e. the coloured squares) without 
                            being killed by the enemy space aliens.
                            The player can end the game by entering the orbiter. 
                        </p>
                        <p>
                            I used Processing to develop the game, which is "an open-source graphical library and integrated development environment (IDE) / playground built for the electronic arts", which uses
                            Java as its programming language (<a href="https://en.wikipedia.org/wiki/Processing_(programming_language)" target="_blank">Wikipedia</a>). 
                            I'm planning to convert the game into Processing.js, which is a version of Processing but in JavaScript so others can play it online.
                        </p>
                    </div>
                </div>
            </article>
           
            <!-- modal -->
            <div class="modal fade bd-example-modal-lg" id="imagemodal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">              
                        <div class="modal-body">
                            <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                            <img src="" class="imagepreview" style="width: 100%; height: 100%;">
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Moxie.Build -->
            <article class="project">
                <div class="row">
                    <div class="col">
                        <a href="#" class="pop" data-toggle="modal" data-target="#moxieModal">
                            <img src="project_images/moxHome.jpg" class="projImg">
                        </a>
                    </div>
                    <div class="col">
                        <h4>E-commerce Shopping Application</h4>
                        <p>2018 | <i><a href="https://moxie.build/" target="_blank">Moxie.Build</a></i></p>
                        <p>
                            I developed an online shopping application with a shopping cart, billing, and product rating systems during my practicum
                            at Cnawlece Incorporated, now <a href="https://wisebox.solutions/" target="_blank">Wisebox Solutions</a>. The application
                            was a training project for using the company's web development platform, Moxie.Build.
                        </p>
                    </div>
                </div>
            </article>

            <!-- ChocAn -->
            <article class="project">
                <div class="row">
                    <div class="col">
                        <a href="#" class="pop" data-toggle="modal" data-target="#chocAnModal">
                            <img src="project_images/chocAnProviderLogin.jpg" class="projImg">
                        </a>
                    </div>
                    <div class="col">
                        <h4>Health Care Provider Software</h4>
                        <p>2018 | <i>Java, JavaFX, PostgreSQL</i></p>
                        <p>
                            This was my final project for my software engineering course where I developed an interface 
                            for providers at a fictional health care organization to process patient data and generate various types of reports.
                        </p>
                    </div>
                </div>
            </article>

            <!-- COMP 331 -->
            <article class="project">
                <div class="row">
                    <div class="col">
                        <a href="#" class="pop" data-toggle="modal" data-target="#comp331">
                            <img src="project_images/comp331.jpg" class="projImg">
                        </a>
                    </div>
                    <div class="col">
                        <h4>Missing Data Imputation Using Linear Regression</h4>
                        <p>2018 | <i>Python, Jupyter Notebook</i></p>
                        <p>
                            From around 1950 to 1980 of the National Basketball Association (NBA), 
                            certain player statistics recorded in the modern NBA such as blocks, steals, and the 3 pointer were not recorded. 
                            I used a statistical technique in my data quality course called data or unit imputation to fill those empty statistics for those players.
                            Linear regression was used to predict what those missing data values could have been. 
                        </p>
                    </div>
                </div>
            </article>

            <!-- Shell -->
            <article class="project">
                <div class="row">
                    <div class="col">
                        <a href="#" class="pop" data-toggle="modal" data-target="#shell">
                            <img src="project_images/shell.jpg" class="projImg" style="width: 100%;">
                        </a>
                    </div>
                    <div class="col">
                        <h4>Linux Shell</h4>
                        <p>2017 | <a href="simple_shell.cpp" target="_blank">Source</a> | <i>C++</i></p>
                        <p>A command line shell I developed in my operating systems course.</p>
                        <div style="height:250px;overflow:auto;">
                            <table class="table">
                                <tr>
                                    <th>Commands</th>
                                    <th>Explanation</th>
                                    <th>Example</th>
                                </tr>
                                <tr>
                                    <td>cd</td>
                                    <td>Displays the full current path</td>
                                    <td></td>
                                </tr>
                                <tr>
                                    <td>cd &ltdir&gt</td>
                                    <td>Changes the current directory to &ltdir&gt</td>
                                    <td>cd /bin</td>
                                </tr>
                                <tr>
                                    <td>list</td>
                                    <td>Displays a list of files in the current directory</td>
                                    <td></td> 
                                </tr>
                                <tr>
                                    <td>mk &ltdir&gt</td>
                                    <td>Creates a new directory called &ltdir&gt</td>
                                    <td>mk folder1</td>
                                </tr>
                                <tr>
                                    <td>rm &ltdir&gt</td>
                                    <td>Removes a directory (empty or not) called &ltdir&gt from the current directory</td>
                                    <td>rm folder1</td>
                                </tr>
                                <tr>
                                    <td>copy &ltsource&gt &ltdestination&gt</td>
                                    <td>Copies the file to another file. If the file does not exist, then a new file will be created</td>
                                    <td>copy source.txt dest.txt
                                </tr>
                                <tr>
                                    <td>exe &ltfile&gt</td>
                                    <td>Executes the binary file &ltfile&gt</td>
                                    <td>exe /usr/bin/vi</td>
                                </tr>
                                <tr>
                                    <td>pt</td>
                                    <td>Displays the process table containing the filename and pid of each process</td>
                                    <td></td>
                                </tr> 
                                <tr>
                                    <td>fin &ltProcess ID&gt</td>
                                    <td>Kills a process immediately</td>
                                    <td>fin 63</td>
                                </tr>
                            </table> 
                        </div>
                    </div>
                </div>
            </article>

            <!-- Driver for IDE/ATA disks  -->
            <article class="project">
                <div class="row">
                    <div class="col">
                        <a href="#" class="pop" data-toggle="modal" data-target="#ide">
                            <img src="project_images/harddrive.jpg" class="projImg">
                        </a>
                    </div>
                    <div class="col">
                        <h4>Driver for IDE/ATA disks </h4>
                        <p>2017 | <a href="assemblyCode.s" target="_blank">Source</a> | <i>X86-64 Assembly</i></p>
                        <p>
                            One of my assignments in my operatings systems course was to implement a system call in assembly to
                            call read/write sectors from two hard disks connected to some Integrated Drive Electronics (IDE).
                        </p>
                    </div>
                </div>
            </article>

            <!-- Blog -->
            <article class="project">
                <div class="row">
                    <div class="col">
                        <a href="#" class="pop" data-toggle="modal" data-target="#blog">
                            <img src="project_images/blog.jpg" class="projImg">
                        </a>
                    </div>
                    <div class="col">
                        <h4>Blog</h4>
                        <p>2017 | <i>JavaScript, PHP, HTML, CSS, MySQL, Apache</i></p>
                            I developed a blog in my web programming course where I reviewed a variety of websites I thought were intriguing. Visitors could create 
                            their own account to rate and comment on the websites I reviewed. 
                    </div>
                </div>
            </article>

            <!-- Tile 15 -->
            <article class="project" id="tile15">
                <div class="row">
                    <div class="col">
                        <section id="right">
                            <p id="solved"><span id="text">You solved the puzzle!</span></p>
                        <div id="board">
                            <div class="tile1" id="t1"><p class="num"></p></div>
                            <div class="tile2" id="t2"><p class="num"></p></div>
                            <div class="tile1" id="t3"><p class="num"></p></div>
                            <div class="tile2" id="t4"><p class="num"></p></div>
                            <div class="tile2" id="t5"><p class="num"></p></div>
                            <div class="tile1" id="t6"><p class="num"></p></div>
                            <div class="tile2" id="t7"><p class="num"></p></div>
                            <div class="tile1" id="t8"><p class="num"></p></div>
                            <div class="tile1" id="t9"><p class="num"></p></div>
                            <div class="tile2" id="t10"><p class="num"></p></div>
                            <div class="tile1" id="t11"><p class="num"></p></div>
                            <div class="tile2" id="t12"><p class="num"></p></div>
                            <div class="tile2" id="t13"><p class="num"></p></div>
                            <div class="tile1" id="t14"><p class="num"></p></div>
                            <div class="tile2" id="t15"><p class="num"></p></div>
                            <div class="tile1" id="t16"><p class="num"></p></div>
                        </div>
                        </section>
                        
                    </div>
                    <div class="col">
                        <h4>15-Puzzle</h4>
                        <p>2017 | <a href="assignment_2.js" target="_blank">Source</a> | <i>JavaScript, jQuery, HTML, CSS</i></p>
                        <p>
                            Try solving the puzzle on the left by clicking the tiles.
                            It's my implementation of the classic sliding tile puzzle I created in my web programming courses.
                            The objective of the game is to arrange the tiles in ascending order for each row starting from 1 and ending in 15.
                        </p>
                    </div>
                </div>
            </article>

            <!-- Phone Contact List -->
            <article class="project">
                <div class="row">
                    <div class="col">
                        <a href="#" class="pop" data-toggle="modal" data-target="#phoneContact">
                            <img src="project_images/comp150.jpg" class="projImg">
                        </a>
                    </div>
                    <div class="col">
                        <h4>Phone Contact List</h4>
                        <p>2016 | <a href="comp150final.cpp" target="_blank">Source</a> | <i>C++</i></p>
                            This was my final project for my introductory programming course where I developed a command-line interface
                            for storing and editing contacts.
                    </div>
                </div>
            </article>

        </div>

        <!-- Statistics -->
        <div class="container" style="padding-bottom: 100px;">
            <h1>Statistics</h1>
            <div class="row">
                <div class="col">
                    <div id="piechart"></div>
                </div>
                <div class="col">
                    <div id="barchart_material" style="width: 100%; height: 100%;"></div>
                </div>
            </div>
        </div>

        <!-- Favourite courses -->
        <div class="container" style="padding-bottom: 100px;">
            <h1>Top 5 Favourite Courses</h1>
            <!-- #1 -->
            <div class="row">
                <div class="col">
                    <h2 class="course">1. COMP 340</h2>
                </div>
                <div class="col">
                    <p>Operating Systems</p>
                </div>
            </div>

            <!-- #2 -->
            <div class="row">
                <div class="col">
                    <h2 class="course">2. COMP 350</h2>
                </div>
                <div class="col">
                    <p>User Interface and Design</p>
                </div>
            </div>
            
            <!-- #3 -->
            <div class="row">
                <div class="col">
                    <h2 class="course">3. COMP 370</h2>
                </div>
                <div class="col">
                    <p>Software Engineering</p>
                </div>
            </div>
            
            <!-- #4 -->
            <div class="row">
                <div class="col">
                    <h2 class="course">4. COMP 351</h2>
                </div>
                <div class="col">
                    <p>Advanced Website Programming</p>
                </div>
            </div>
            
            <!-- #5 -->
            <div class="row">
                <div class="col">
                    <h2 class="course">5. COMP 481</h2>
                </div>
                <div class="col">
                    <p>Functional and Logic Programming</p>
                </div>
            </div>
            
            <!-- Honourable Mentions -->
            <br>
            <h2>Honourable Mentions</h2>
            <div class="row">
                <div class="col">
                    <h2 class="course">COMP 359</h2>
                </div>
                <div class="col">
                    <p>Design and Analysis: Algorithms</p>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <h2 class="course">COMP 380</h2>
                </div>
                <div class="col">
                    <p>Introduction to Artificial Intelligence</p>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <h2 class="course">COMP 420</h2>
                </div>
                <div class="col">
                    <p>Computers and Society</p>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <h2 class="course">COMP 382</h2>
                </div>
                <div class="col">
                    <p>Languages, Computation, and Machines</p>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <h2 class="course">COMP 390</h2>
                </div>
                <div class="col">
                    <p>Data Communications</p>
                </div>
            </div>
            
            
        </div>

        <footer>
            <div class="container">
                <div class="row">
                    <div class="col"><a href="https://github.com/lloyd-2014" target="_blank">GitHub</a></div>
                    <div class="col"><a href="mailto:lk.junos@gmail.com" target="_top">Email</a></div>
                </div>
            </div>
            <br>
        </footer>

        <!-- Optional JavaScript -->
        <!-- jQuery first, then Popper.js, then Bootstrap JS -->
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
        
        <!-- Pie Chart -->
        <!-- https://www.w3schools.com/howto/tryit.asp?filename=tryhow_google_pie_chart -->
        <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
        <script type="text/javascript">
            // Load google charts
            google.charts.load('current', {'packages':['corechart']});
            google.charts.setOnLoadCallback(drawChart);

            // Draw the chart and set the chart values
            function drawChart() {
                var data = google.visualization.arrayToDataTable([
                    ['Language', 'Projects'],
                    ['Java', 2],
                    ['C++', 2],
                    ['Python', 1],
                    ['JavaScript', 2],
                    ['PHP', 1],
                    ['HTML/CSS',3],
                    ['Assembly',1]
            ]);

            // Optional; add a title and set the width and height of the chart
            var options = {'title':'Languages used in Projects', 'width':550, 'height':400};

            // Display the chart inside the <div> element with id="piechart"
            var chart = new google.visualization.PieChart(document.getElementById('piechart'));
             chart.draw(data, options);
            }

            google.charts.load('current', {'packages':['bar']});
            google.charts.setOnLoadCallback(drawBarChart);

            function drawBarChart() {
                var data = google.visualization.arrayToDataTable([
                    ['Language', 'Lines of Code'],
                    ['Java', 4623],
                    ['JavaScript', 1400],
                    ['C++', 1308],
                    ['PHP', 424],
                    ['Assembly', 117],
                    ['Python', 53]
                ]);

                var options = {
                chart: {
                    title: 'Approximate Lines of Code Written in Projects',
                    subtitle: '2016-2018',
                },
                bars: 'horizontal' // Required for Material Bar Charts.
                };

                var chart = new google.charts.Bar(document.getElementById('barchart_material'));

                chart.draw(data, google.charts.Bar.convertOptions(options));
            }
            
        </script>
        
        <!-- For image modal -->
        <script>
            $(function() {
                $('.pop').on('click', function() {
                    $('.imagepreview').attr('src', $(this).find('img').attr('src'));
                    $('#imagemodal').modal('show');   
                });		
            });
        </script>

        <!-- Assembly modal -->
        <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Source Code</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
<pre style="width: 100%; height: 400px;">
section	.text
    global _start

_start:
    mov AX, BX      ; move the 16-bit address from BX to AX
                    ; assume that the address was stored in BX
    push AX         ; save the original AX
    push 0x01       ; 1
    push 0x00       ; 0
    push 0x03       ; 3
    push 0x05       ; 5
    push 0x000A     ; 10
    push [eip+2]    ; the 32-bit return address
    trap IDE_access 
_IDE_access:   
    push ebp
    mov ebp, esp
    
    cmp [esp+6], 0x00   ; access primary master 
    je primaryMaster

    cmp [esp+6], 0x01   ; access primary slave
    je primarySlave
    
    cmp [esp+6], 0x02   ; access secondary master
    je secondaryMaster 
    
    cmp [esp+6], 0x03   ; access secondary slave
    je secondarySlave
    jmp err             ; error

    primaryMaster:
        cmp [esp+7], 0x00   ; check for read operation
        je pm1
        cmp [esp+7], 0x10   ; check for write operation
        je pm2
        pm1:                    ; read
            AND 0x1F7, 0x40     ; check if BSY is set
            jnz pm1             ; if BSY set, busy wait
            AND 0x1F7, 0xC0     ; check if DRDY is set 
            jz pm1              ; if DRDY is not set, busy wait
            mov AL, 0x00        ; master drive is selected      
            out AL, 0xF7        ; program drive/head
            mov AX, [esp+10]    ; move cylinder_address into AX
            out AX, 0x1F5       ; program cylinder_address 
            mov AL, [esp+9]     ; move sector_address into AL
            out AL, 0x1F3       ; program sector number
            mov AL, [esp+8]     ; move sector_count into AL
            out AL, 0x1F2       ; program sector count
            out 0x21, 0x1F7;    ; program command register for read operation
            pmRead:             ; begin reading
                AND 0x1F7, 0x09 ; check if DRQ && ERR == 0 
                jz pmRead       ; continue reading if DRQ && ERR == 0 
                AND 0x1F7, 0x01 ; check if ERR = 1
                jnz pmReadErr   ; ERR = 1 if AND operation != 0
                AND 0x1F7, 0x08 ; check if DRQ = 1
                jnz pmGetData   ; read data if DRQ is set 
                jmp pmRead      ; if DRQ = 0 busy wait
                pmReadErr:      ; exit function 
                    mov esp, ebp
                    pop ebp
                    ret 10
                pmGetData:
                    mov DX, 0xF0    ; read data from IDE
                    mov DI, [esp+4] ; address of the char array
                    mov CX, 256     ; number of words to be transferred (512 bytes)
                    REP INSW        ; 512 bytes read from the data register port
                                    ; and stored in the char array
                    cmp 0x1F2, 0x00 ; check if sector count is 0
                    jnz pmRead      ; if sector != 0, read next sector
                    jmp endIf       ; exit function
                
        pm2:                    ; write
            AND 0x1F7, 0x40     ; check if BSY is set
            jnz pm2             ; if BSY set, busy wait
            AND 0x1F7, 0xC0     ; check if DRDY is set 
            jz pm2              ; if DRDY is not set, busy wait
            mov AL, 0x00        ; master drive is selected      
            out AL, 0xF7        ; program drive/head
            mov AX, [esp+10]    ; move cylinder_address into AX
            out AX, 0x1F5       ; program cylinder_address 
            mov AL, [esp+9]     ; move sector_address into AL
            out AL, 0x1F3       ; program sector number
            mov AL, [esp+8]     ; move sector_count into AL
            out AL, 0x1F2       ; program sector count
            out 0x31, 0x1F7;    ; program command register for read operation
            pmWrite:            ; begin reading
                AND 0x1F7, 0x09 ; check if DRQ && ERR == 0 
                jz pmWrite      ; continue reading if DRQ && ERR == 0 
                AND 0x1F7, 0x01 ; check if ERR = 1
                jnz pmWriteErr  ; ERR = 1 if AND operation != 0
                AND 0x1F7, 0x08 ; check if DRQ = 1
                jnz pmWriteData ; write data if DRQ is set 
                jmp pmWrite     ; if DRQ = 0 busy wait
                pmWriteErr:     ; exit function 
                    mov esp, ebp
                    pop ebp
                    ret 10
                pmWriteData:
                    out DX, 0xF0    ; IDE data register port
                    mov DI, [esp+4] ; address of the char array
                    mov CX, 256     ; number of words to be transferred (512 bytes)
                    REP OUTSW       ; 512 bytes written to the data register port
                                    ; froms the char array
                    AND 0x1F7, 0x40 ; check if BSY is set
                    jnz pmWriteData ; if BSY set, busy wait
                    cmp 0x1F2, 0x00 ; check if sector count is 0
                    jnz pmWrite     ; if sector != 0, read next sector
                    jmp endIf       ; exit function
    primarySlave:
    secondaryMaster:
    secondarySlave:
    endIf:
        mov esp, ebp
        pop ebp
        ret 10
section .data
</pre>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tile 15 game -->
        <script src="assignment_2.js"></script>
    </body>
</html>

<!-- https://stackoverflow.com/questions/25023199/in-bootstrap-open-enlarge-image-in-modal -->
